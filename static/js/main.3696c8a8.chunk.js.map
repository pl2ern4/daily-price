{"version":3,"sources":["utility.js","App.js","reportWebVitals.js","index.js"],"names":["getChangedRates","param","array","sortByDate","len","length","changedId","o","price","push","id","getDate","params","Date","toDateString","sort","a","b","date","uniqueComodity","Array","from","Set","map","obj","comodity","App","useState","sortPriceFlag","setSortPriceFlag","filter","setFilter","data","setPrice","className","onClick","window","location","reload","getOption","type","value","Object","keys","selectOption","onChange","e","key","newFilter","filteredData","comodityFilter","priceFilter","category","categoryFilter","handleFilter","target","name","defaultValue","selected","disabled","hightlightPrice","uniqueComodityArr","getChangedId","style","width","indexOf","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNASMA,EAAkB,SAAAC,GAIpB,IAHA,IAAMC,EAAQC,EAAWF,GACnBG,EAAMF,EAAMG,OACZC,EAAY,GACVC,EAAE,EAAGA,GAAGH,EAAI,EAAEG,IACfL,EAAMK,IAAML,EAAMK,EAAE,GAAGC,QAASN,EAAMK,GAAGC,OACxCF,EAAUG,KAAKP,EAAMK,GAAGG,IAGhC,OAAOJ,GAGEK,EAAU,eAACC,EAAD,uDAAQ,GAAR,OAAgB,IAAIC,KAAKD,GAASE,gBAE5CX,EAAa,SAAAD,GAAK,OAAGA,EAAMa,MAAK,SAACC,EAAEC,GAAH,OAAO,IAAIJ,KAAKG,EAAEE,MAAQ,IAAIL,KAAKI,EAAEC,MAAM,GAAM,EAAK,MAE7FC,EAAgB,SAAAjB,GAAK,OAAIkB,MAAMC,KAAK,IAAIC,IAAJ,YAAYpB,EAAMqB,KAAI,SAAAC,GAAG,OAAEA,EAAIC,gB,cC0E1DC,MAhGf,WAAgB,IAAD,EAC6BC,oBAAS,GADtC,mBACNC,EADM,KACSC,EADT,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGaJ,mBAAS,YAAIK,IAH1B,mBAGNxB,EAHM,KAGCyB,EAHD,KAKb,IAAKzB,EACH,OAAQ,sBAAK0B,UAAU,gBAAf,UACN,wFACA,4BAAG,wBAAQC,QAAS,kBAAMC,OAAOC,SAASC,UAAvC,6BAGP,IAoBMC,EAAU,SAACC,EAAMC,GACrB,IAAIvC,EAASwC,OAAOC,KAAKb,GAAQzB,OAAgBG,EAAPwB,EAC1C9B,EAAQA,EAAMqB,KAAI,SAAAC,GAAG,OAAEA,EAAIgB,MAC3B,IAAII,EAAe,IAAItB,IAAJ,YAAYpB,IAE/B,OADA0C,EAAexB,MAAMC,KAAKuB,GACtB1C,EAIF,yBAAQ2C,SAAU,SAAAC,GAAC,OAtBF,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,IAAKN,EAAU,EAAVA,MACpBO,EAAS,2BAAOlB,GAAP,kBAAgBiB,EAAKN,IAC9BQ,EAAejB,EAAKF,QAAO,SAAAN,GAC/B,IAAM0B,GAAiBF,EAAUvB,UAAWD,EAAIC,WAAWuB,EAAUvB,SAC/D0B,GAAcH,EAAUI,UAAW5B,EAAI4B,WAAWJ,EAAUI,SAC5DC,GAAiBL,EAAUxC,OAAQ,UAAGgB,EAAIhB,SAAP,UAAoBwC,EAAUxC,OAEvE,OAAO0C,GAAkBC,GAAeE,KAE1CtB,EAAU,eAAIiB,IACdf,EAAS,YAAIgB,IAYUK,CAAa,CAACP,IAAIP,EAAMC,MAAMK,EAAES,OAAOd,MAAOK,OAAKU,KAAMhB,EAAMiB,aAAa,UAAjG,UACI,yBAAQhB,MAAM,UAAUiB,UAAQ,EAACC,SAAS,WAA1C,oBAA6DlB,KAC5DG,GAAgBA,EAAarB,KAAI,SAACC,EAAIuB,GAAL,OAAW,wBAAsCN,MAAOjB,EAA7C,SAAmDA,GAAnD,iBAAuBgB,EAAvB,YAA+BO,UALzE,MASLa,EDjDoB,SAAA1D,GACxB,IADgC,EAC5BI,EAAY,GACVuD,EAAoB1C,EAAejB,GAFT,cAGnB2D,GAHmB,yBAGxBtD,EAHwB,QAI5BD,EAAS,sBAAOA,GAAP,YAAoBN,EAAgBE,EAAM4B,QAAO,SAAAN,GAAG,OAAEjB,IAAIiB,EAAIC,gBAD3E,IAAI,EAAJ,qBAAgC,IAHA,8BAMhC,OAAOnB,EC2CewD,CAAa9B,GACrC,OACE,sBAAKE,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,cAAf,UACE,gDAGA,4CACYvB,UAGd,qBAAKuB,UAAU,gBAAf,qFAEF,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,SAAf,UACSK,EAAU,WAAY,aACtBA,EAAU,QAAS,SACnBA,EAAU,WAAY,YACxB,wBAAQJ,QAAS,kBAAIF,EAAS,YAAID,KAAlC,sBAEP,wBAAO+B,MAAO,CAAEC,MAAO,QAAvB,UACE,gCACE,+BACE,0CACA,oBAAI7B,QAAS,SAAAW,GAAC,OAAEjB,GAAkBD,IAAlC,yBACA,+CAGJ,gCAEIzB,EAAWK,GAAOO,MAlEZ,SAACC,EAAEC,GACnB,OAAIW,EAGKZ,EAAER,MAAQS,EAAET,OAAS,EAAI,EAFzBQ,EAAER,MAAQS,EAAET,OAAS,EAAI,KAgEUe,KAAI,SAACC,EAAKuB,GAAN,OACpC,qBAAIb,UAAW0B,EAAgBK,QAAQzC,EAAId,KAAK,EAAK,WAAc,GAAnE,UACE,6BAAKc,EAAIC,WACT,+BACE,4BAAID,EAAIhB,QACR,uDAA0BG,EAAQa,EAAIN,YAExC,6BAAKM,EAAI4B,aANX,gBAAqFL,aAY1FvC,EAAMH,QAAU,qBAAK6B,UAAU,gBAAf,gDAA2E,YCjFvFgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.3696c8a8.chunk.js","sourcesContent":["export const getChangedId = array =>{\n    let changedId = [];\n    const uniqueComodityArr = uniqueComodity(array);\n    for(let o of uniqueComodityArr){\n        changedId = [...changedId,...getChangedRates(array.filter(obj=>o===obj.comodity))];\n    }\n    return changedId;\n}\n\nconst getChangedRates = param =>{\n    const array = sortByDate(param);\n    const len = array.length;\n    const changedId = [];\n    for(let o=1; o<=len-1;o++){\n        if(array[o] && array[o-1].price!== array[o].price){\n            changedId.push(array[o].id);\n        }\n    }\n    return changedId;\n}\n\nexport const getDate = (params=\"\") => (new Date(params)).toDateString();\n\nexport const sortByDate = array =>array.sort((a,b)=>new Date(a.date) - new Date(b.date)>1 && -1 || 1);\n\nconst uniqueComodity= array => Array.from(new Set([...array.map(obj=>obj.comodity)]));","import { useState } from 'react';\nimport {getChangedId , sortByDate, getDate} from './utility';\nimport data from './services/data.json';\nfunction App() {\n  const [sortPriceFlag, setSortPriceFlag] = useState(true);\n  const [filter, setFilter] = useState({});\n  const [price, setPrice] = useState([...data]);\n\n  if (!price) {\n    return (<div className='no-data-found'>\n      <p>Oops! looks like some error, Please Click on the button</p>\n      <p><button onClick={() => window.location.reload()}>Click Me!!</button></p>\n    </div>);\n  }\n  const sortPrice = (a,b)=>{\n    if(!sortPriceFlag){\n      return a.price > b.price ? -1 : 1; \n    }\n      return a.price < b.price ? -1 : 1;\n  }\n\n  const handleFilter = ({key, value}) =>{\n    const newFilter = {...filter, [key]:value};\n    const filteredData = data.filter(obj=>{\n      const comodityFilter = newFilter.comodity ? obj.comodity===newFilter.comodity : true;   \n      const priceFilter = newFilter.category ? obj.category===newFilter.category : true;   \n      const categoryFilter = newFilter.price ? `${obj.price}`===`${newFilter.price}` : true;   \n\n      return comodityFilter && priceFilter && categoryFilter;\n    })\n    setFilter({...newFilter})\n    setPrice([...filteredData]);\n  }\n\n  const getOption=(type, value)=>{\n    let array = !Object.keys(filter).length ? data : price;\n    array = array.map(obj=>obj[type])\n    let selectOption = new Set([...array]);\n    selectOption = Array.from(selectOption);\n    if(!array){\n      return null;\n    }\n    return (\n      <select onChange={e=>handleFilter({key:type, value:e.target.value, e})} name={type} defaultValue=\"disable\">\n          <option value=\"disable\" selected disabled='disabled'>Select {value}</option>\n          {selectOption && selectOption.map((obj,key)=><option key={`option_${type}_${key}`} value={obj}>{obj}</option>)}\n      </select>\n    )\n  }\n  const hightlightPrice = getChangedId(data);\n  return (\n    <div className='App'>\n      <div className='header'>\n        <div className='header-body'>\n          <div>\n            Daily Price!!\n              </div>\n          <div>\n            Price on {getDate()}\n          </div>\n        </div>\n        <div className='moving-header'>Daily Price doesn't gauranteed of correct price at particular time!!</div>\n      </div>\n      <div className='content'>\n        <div className='filter'>\n               { getOption('comodity', 'Commodity') }\n               { getOption('price', 'Price') }\n               { getOption('category', 'Category') }\n               <button onClick={()=>setPrice([...data])}>Reset</button>\n        </div>\n        <table style={{ width: '100%' }}>\n          <thead>\n            <tr>\n              <th>Comodity</th>\n              <th onClick={e=>setSortPriceFlag(!sortPriceFlag)}>Price Today</th>\n              <th>Category</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              sortByDate(price).sort(sortPrice).map((obj, key) => (\n                <tr className={hightlightPrice.indexOf(obj.id)>-1 && \"higlight\" || \"\"} key={`price-${key}`}>\n                  <td>{obj.comodity}</td>\n                  <td>\n                    <p>{obj.price}</p>\n                    <p>Prices was updated on {getDate(obj.date)}</p>\n                  </td>\n                  <td>{obj.category}</td>\n                </tr>\n              ))\n            }\n          </tbody>\n        </table>\n        {(!price.length && <div className='no-data-found'>No Data Found for selected Filter</div>) || null}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}